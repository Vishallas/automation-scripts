#!/bin/bash

CACHE_FILE="/tmp/ec2_instance_cache.json"
CACHE_TTL=10
AWS_PROFILE="pre-prod"

ensure_sso_login() {
    echo "[INFO] Validating AWS SSO session for profile: $PROFILE"
    if ! aws sts get-caller-identity --profile "$PROFILE" --region "$REGION" &>/dev/null; then
        echo "[WARN] SSO session expired or invalid. Attempting re-login..."
        aws sso login --profile "$PROFILE"
    fi
}

refresh_cache() {
  echo "[INFO] Refreshing EC2 cache using profile: $AWS_PROFILE ..."
  ensure_sso_session

  aws --profile "$AWS_PROFILE" ec2 describe-instances \
    --query "Reservations[].Instances[].[InstanceId, PrivateIpAddress, Tags, State.Name]" \
    --output json | jq -r '
    map(
      {
        instance_id: .[0],
        private_ip: .[1],
        name: (
          if (.[2] | type) == "array" then
            (.[2] | map(select(.Key == "Name")) | .[0].Value // ("UNKNOWN+" + (.[1] // "0.0.0.0")))
          else
            "UNKNOWN+" + (.[1] // "0.0.0.0")
          end
        ),
        state: .[3]
      }
    )' > "$CACHE_FILE"
}

ensure_cache_valid() {
  if [[ ! -f "$CACHE_FILE" ]] || [[ $(( $(date +%s) - $(stat -f "%m" "$CACHE_FILE") )) -ge $CACHE_TTL ]]; then
    refresh_cache
  fi
}

get_instance_info_by_name() {
  local name="$1"
  jq -r --arg name "$name" '.[] | select(.name == $name)' "$CACHE_FILE" 2>/dev/null
}

get_instance_info_by_ip(){
  local ip="$1"
  jq -r --arg ip "$ip" '.[] | select(.private_ip == $ip)' "$CACHE_FILE" 2>/dev/null
}

get_instance_id_by_name() {
  local name="$1"
  jq -r --arg name "$name" '
    .[] | select(.name == $name) |
    "\(.instance_id)"
  ' "$CACHE_FILE" 2>/dev/null
}

get_instance_id_by_ip() {
  local ip="$1"
  jq -er --arg ip "$ip" '
    .[] | select(.private_ip == $ip) | .instance_id
  ' "$CACHE_FILE" 2>/dev/null
}

start_instance() {
  aws --profile "$AWS_PROFILE" ec2 start-instances --instance-ids "$1"
}

stop_instance() {
  aws --profile "$AWS_PROFILE" ec2 stop-instances --instance-ids "$1"
}

# status_instance() {
#   aws --profile "$AWS_PROFILE" ec2 describe-instances --instance-ids "$1" \
#     --query "Reservations[].Instances[].State.Name" --output text
# }

ensure_sso_session() {
  aws --profile "$AWS_PROFILE" sts get-caller-identity &>/dev/null || {
    echo "[INFO] AWS session expired or not found. Triggering SSO login..."
    aws --profile "$AWS_PROFILE" sso login
  }
}

status_instance() {
  local instance_name="$2"
  local instance_id="$1"

  # ensure_sso_session


  echo "[INFO] Polling status for instance: $instance_name (ID: $instance_id)..."
  echo

  while true; do
    ensure_sso_session

    status=$(aws ec2 describe-instances \
      --profile "$AWS_PROFILE" \
      --instance-ids "$instance_id" \
      --query "Reservations[].Instances[].State.Name" \
      --output text)

    time_now=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$time_now] Status: $status"

    if [[ "$status" == "terminated" || "$status" == "running" || "$status" == "stopped" ]]; then
      echo -e "\nExiting polling loop."
      break
    els
    fi
    
    sleep 5
  done
}


ssh_instance() {
  ssh ec2-user@"$1"
}

# ---- [Main Dispatcher] ----

main() {
  local cmd="$1"; shift

  case "$cmd" in
    cache-refresh)
      refresh_cache
      exit 0
      ;;
    start|stop|status)
      #ensure_cache_valid
      ensure_sso_session
      case "$1" in
        --name) INSTANCE_ID=$(get_instance_id_by_name "$2") ;;
        --ip) INSTANCE_ID=$(get_instance_id_by_ip "$2") ;;
        *) echo "Usage: cws $cmd --name <Name> | --ip <IP>"; exit 1 ;;
      esac
      [[ -z "$INSTANCE_ID" ]] && echo "Instance not found." && exit 1
      ${cmd}_instance "$INSTANCE_ID" "$2" 
      ;;
    ssh)
      if [[ "$1" == "--ip" ]]; then
        ssh_instance "$2"
      else
        echo "Usage: cws ssh --ip <IP>"; exit 1
      fi
      ;;
    info)
      if [[ "$1" == "--name" ]]; then
        get_instance_info_by_name "$2"
      elif [[ "$1" == "--ip" ]]; then
        get_instance_info_by_ip "$2"
      fi
      ;;
    *)
      echo "Usage:"
      echo "  cws start|stop|status|info --name <Name> | --ip <IP>"
      echo "  cws ssh --ip <IP>"
      echo "  cws cache-refresh"
      ;;
  esac
}

main "$@"
